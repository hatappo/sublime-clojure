{
  "scope": "source.clojurescript",
  "completions": [
    // Namaspaces
    "cljs.core","cljs.js","cljs.nodejs","cljs.pprint","cljs.reader","cljs.repl","cljs.spec","cljs.spec.impl.gen","cljs.spec.test","cljs.test","clojure.core.reducers","clojure.data","clojure.reflect","clojure.set","clojure.string","clojure.walk","clojure.zip","cljs.analyzer.api","cljs.build.api","cljs.compiler.api","cljs.repl","cljs.repl.browser","cljs.repl.nashorn","cljs.repl.node","cljs.repl.reflect","cljs.repl.rhino","cljs.repl.server",
    // Vars
    "case*","catch","def","defrecord*","deftype*","do","finally","fn*","if","import","in-ns","js*","let*","letfn*","load-file","load-namespace","loop*","new","ns","quote","recur","require","require-macros","set!","throw","try","var","*1","*2","*3","*assert*","*clojurescript-version*","*e","*flush-on-newline*","*loaded-libs*","*main-cli-fn*","*ns*","*out*","*print-dup*","*print-err-fn*","*print-fn*","*print-length*","*print-level*","*print-meta*","*print-newline*","*print-readably*","*target*","*unchecked-if*","->","->>","..","==",">=","CHAR_MAP","DEMUNGE_MAP","DEMUNGE_PATTERN","NS_CACHE","aclone","add-to-string-hash-cache","add-watch","aget","alength","alter-meta!","amap","ancestors","and","apply","areduce","array","array-chunk","array-index-of","array-iter","array-list","array-map","array-seq","array?","as->","aset","assert","assoc","assoc!","assoc-in","associative?","atom","binding","bit-and","bit-and-not","bit-clear","bit-count","bit-flip","bit-not","bit-or","bit-set","bit-shift-left","bit-shift-right","bit-shift-right-zero-fill","bit-test","bit-xor","boolean","boolean?","booleans","bounded-count","butlast","byte","bytes","case","cat","char","char?","chars","chunk","chunk-append","chunk-buffer","chunk-cons","chunk-first","chunk-next","chunk-rest","chunked-seq","chunked-seq?","clj->js","clone","cloneable?","coll?","comment","comp","comparator","compare","compare-and-set!","complement","completing","concat","cond","cond->","cond->>","condp","conj","conj!","cons","constantly","contains?","copy-arguments","count","counted?","create-ns","cycle","dec","declare","dedupe","default-dispatch-val","defmacro","defmethod","defmulti","defn","defn-","defonce","defprotocol","defrecord","deftype","delay","delay?","demunge","deref","derive","descendants","disj","disj!","dispatch-fn","dissoc","dissoc!","distinct","distinct?","divide","doall","dorun","doseq","dotimes","doto","double","double-array","doubles","drop","drop-last","drop-while","eduction","empty","empty?","enable-console-print!","ensure-reduced","es6-entries-iterator","es6-iterable","es6-iterator","es6-iterator-seq","es6-set-entries-iterator","even?","every-pred","every?","ex-cause","ex-data","ex-info","ex-message","exists?","extend-protocol","extend-type","false?","ffirst","filter","filterv","find","find-macros-ns","find-ns","find-ns-obj","first","flatten","float","floats","flush","fn","fn?","fnext","fnil","for","force","frequencies","gen-apply-to","gensym","get","get-in","get-method","get-validator","goog-define","group-by","hash","hash-combine","hash-keyword","hash-map","hash-ordered-coll","hash-set","hash-string","hash-string*","hash-unordered-coll","ident?","identical?","identity","if-let","if-not","if-some","ifn?","implements?","import-macros","inc","indexed?","inst-ms","inst?","instance?","int","int-array","int-rotate-left","int?","integer?","interleave","interpose","into","into-array","ints","is_proto_","isa?","iter","iterable?","iterate","js->clj","js-comment","js-debugger","js-delete","js-in","js-inline-comment","js-invoke","js-keys","js-mod","js-obj","js-reserved","js-str","juxt","keep","keep-indexed","key","key->js","key-test","keys","keyword","keyword-identical?","keyword?","last","lazy-cat","lazy-seq","lazy-transformer","let","letfn","list","list*","list?","locking","long","long-array","longs","loop","m3-C1","m3-C2","m3-fmix","m3-hash-int","m3-hash-unencoded-chars","m3-mix-H1","m3-mix-K1","m3-seed","macroexpand","macroexpand-1","make-array","make-hierarchy","map","map-indexed","map?","mapcat","mapv","max","max-key","memfn","memoize","merge","merge-with","meta","methods","min","min-key","missing-protocol","mix-collection-hash","mk-bound-fn","mod","multi-stepper","munge","name","namespace","nat-int?","neg-int?","neg?","newline","next","nfirst","nil-iter","nil?","nnext","not","not-any?","not-empty","not-every?","not-native","not=","ns-interns","ns-interns*","ns-name","ns-unmap","nth","nthnext","nthrest","number?","obj-map","object-array","object?","odd?","or","parents","partial","partition","partition-all","partition-by","peek","persistent!","persistent-array-map-seq","pop","pop!","pos-int?","pos?","pr","pr-seq-writer","pr-sequential-writer","pr-str","pr-str*","pr-str-with-opts","prefer-method","prefers","prim-seq","print","print-map","print-meta?","print-str","println","println-str","prn","prn-str","prn-str-with-opts","qualified-ident?","qualified-keyword?","qualified-symbol?","quot","rand","rand-int","rand-nth","random-sample","random-uuid","range","ranged-iterator","re-find","re-matches","re-pattern","re-seq","realized?","record?","reduce","reduce-kv","reduceable?","reduced","reduced?","reductions","regexp?","reify","rem","remove","remove-all-methods","remove-method","remove-watch","repeat","repeatedly","replace","replicate","reset!","reset-meta!","rest","reverse","reversible?","rseq","rsubseq","run!","satisfies?","second","select-keys","seq","seq-iter","seq?","seqable?","sequence","sequential?","set","set-from-indexed-seq","set-print-err-fn!","set-print-fn!","set-validator!","set?","short","shorts","shuffle","simple-benchmark","simple-ident?","simple-keyword?","simple-symbol?","some","some->","some->>","some-fn","some?","sort","sort-by","sorted-map","sorted-map-by","sorted-set","sorted-set-by","sorted?","special-symbol?","specify","specify!","split-at","split-with","spread","stepper","str","string-hash-cache","string-hash-cache-count","string-iter","string-print","string?","subs","subseq","subvec","swap!","symbol","symbol-identical?","symbol?","system-time","tagged-literal","tagged-literal?","take","take-last","take-nth","take-while","test","this-as","time","to-array","to-array-2d","trampoline","transduce","transient","tree-seq","true?","type","type->str","unchecked-add","unchecked-add-int","unchecked-byte","unchecked-char","unchecked-dec","unchecked-dec-int","unchecked-divide-int","unchecked-double","unchecked-float","unchecked-inc","unchecked-inc-int","unchecked-int","unchecked-long","unchecked-multiply","unchecked-multiply-int","unchecked-negate","unchecked-negate-int","unchecked-remainder-int","unchecked-short","unchecked-subtract","unchecked-subtract-int","undefined?","underive","unreduced","unsafe-cast","unsigned-bit-shift-right","update","update-in","uuid","uuid?","val","vals","var?","vary-meta","vec","vector","vector?","volatile!","volatile?","vreset!","vswap!","when","when-first","when-let","when-not","when-some","while","with-meta","with-out-str","with-redefs","write-all","zero?","zipmap","ASeq","ArrayChunk","ArrayIter","ArrayList","ArrayNode","ArrayNodeIterator","ArrayNodeSeq","Atom","BitmapIndexedNode","BitmapIndexedNode.EMPTY","BlackNode","Box","ChunkBuffer","ChunkedCons","ChunkedSeq","Cons","Delay","ES6EntriesIterator","ES6Iterator","ES6IteratorSeq","ES6SetEntriesIterator","Eduction","EmptyList","ExceptionInfo","Fn","HashCollisionNode","HashMapIter","HashSetIter","IAssociative","IAtom","IChunk","IChunkedNext","IChunkedSeq","ICloneable","ICollection","IComparable","ICounted","IDeref","IDerefWithTimeout","IEditableCollection","IEmptyableCollection","IEncodeClojure","IEncodeJS","IEquiv","IFn","IHash","IIndexed","IIterable","IKVReduce","IList","ILookup","IMap","IMapEntry","IMeta","IMultiFn","INamed","INext","IPending","IPrintWithWriter","IRecord","IReduce","IReset","IReversible","ISeq","ISeqable","ISequential","ISet","ISorted","IStack","ISwap","ITransientAssociative","ITransientCollection","ITransientMap","ITransientSet","ITransientVector","IUUID","IVector","IVolatile","IWatchable","IWithMeta","IWriter","IndexedSeq","IndexedSeqIterator","Inst","KeySeq","Keyword","LazySeq","LazyTransformer","LazyTransformer.create","LazyTransformer.createMulti","List","List.EMPTY","MetaFn","MultiFn","MultiStepper","Namespace","NeverEquiv","NodeIterator","NodeSeq","ObjMap","ObjMap.EMPTY","ObjMap.HASHMAP_THRESHOLD","ObjMap.fromObject","PersistentArrayMap","PersistentArrayMap.EMPTY","PersistentArrayMap.HASHMAP-THRESHOLD","PersistentArrayMap.fromArray","PersistentArrayMapIterator","PersistentArrayMapSeq","PersistentHashMap","PersistentHashMap.EMPTY","PersistentHashMap.fromArray","PersistentHashMap.fromArrays","PersistentHashSet","PersistentHashSet.EMPTY","PersistentHashSet.fromArray","PersistentQueue","PersistentQueue.EMPTY","PersistentQueueIter","PersistentQueueSeq","PersistentTreeMap","PersistentTreeMap.EMPTY","PersistentTreeMapSeq","PersistentTreeSet","PersistentTreeSet.EMPTY","PersistentVector","PersistentVector.EMPTY","PersistentVector.EMPTY-NODE","PersistentVector.fromArray","RSeq","Range","RangeIterator","RangedIterator","RecordIter","RedNode","Reduced","SeqIter","Stepper","StringBufferWriter","StringIter","Subvec","Symbol","TaggedLiteral","TransientArrayMap","TransientHashMap","TransientHashSet","TransientVector","UUID","ValSeq","Var","VectorNode","Volatile","*eval-fn*","*load-fn*","*loaded*","analyze-str","compile-str","dump-core","empty-state","eval","eval-str","file->ns","js-eval","load-analysis-cache!","load-source-map!","ns->relpath","require","with-state","enable-util-print!","process","require","*print-base*","*print-miser-width*","*print-pprint-dispatch*","*print-pretty*","*print-radix*","*print-right-margin*","*print-suppress-namespaces*","char-code","cl-format","code-dispatch","deftype","float?","formatter","formatter-out","fresh-line","get-pretty-writer","getf","pp","pprint","pprint-indent","pprint-logical-block","pprint-newline","pprint-set","pprint-tab","print-length-loop","print-table","set-pprint-dispatch","setf","simple-dispatch","with-pprint-dispatch","with-pretty-writer","write","write-out","IPrettyFlush","*default-data-reader-fn*","*tag-table*","deregister-default-tag-parser!","deregister-tag-parser!","desugar-meta","dispatch-macros","escape-char","escape-char-map","float-pattern","int-pattern","macro-terminating?","macros","make-unicode-char","maybe-read-tagged-type","not-implemented","parse-and-validate-timestamp","parse-timestamp","push-back-reader","ratio-pattern","read","read-2-chars","read-4-chars","read-comment","read-delimited-list","read-discard","read-dispatch","read-keyword","read-list","read-literal","read-map","read-meta","read-number","read-past","read-raw-string*","read-regex","read-set","read-string","read-string*","read-symbol","read-token","read-unmatched-delimiter","read-vector","reader-error","register-default-tag-parser!","register-tag-parser!","skip-line","special-symbols","symbol-pattern","throwing-reader","unicode-2-pattern","unicode-4-pattern","validate-unicode-escape","wrapping-reader","PushbackReader","StringPushbackReader","apropos","dir","doc","err-out","find-doc","print-doc","pst","source","*coll-check-limit*","*coll-error-limit*","*fspec-iterations*","*recursion-limit*","MAX_INT","abbrev","alt","and","cat","coll-checker","coll-gen","coll-of","conform","conformer","def","describe","every","every-kv","exercise","explain","explain-data","explain-data*","explain-out","explain-str","fdef","form","fspec","gen","get-spec","inst-in","inst-in-range?","instrument","instrument*","instrument-all","instrument-ns","int-in","int-in-range?","keys","keys*","map-of","multi-spec","nilable","or","regex?","registry","spec","spec?","speced-vars","speced-vars*","tuple","unform","unstrument","unstrument*","unstrument-all","unstrument-ns","valid?","with-gen","with-instrument-disabled","Spec","any","any-printable","bind","boolean","cat","char","char-alpha","char-alphanumeric","char-ascii","choose","delay","double","dynaload","elements","fmap","for-all*","gen-for-pred","generate","hash-map","int","keyword","keyword-ns","large-integer","large-integer*","list","map","not-empty","one-of","quick-check","ratio","return","sample","set","simple-type","simple-type-printable","string","string-alphanumeric","string-ascii","such-that","symbol","symbol-ns","tuple","uuid","vector","vector-distinct","LazyVar","check-fn","check-var","run-all-tests","run-tests","*current-env*","are","assert-any","assert-expr","assert-predicate","async","async?","block","clear-env!","compose-fixtures","deftest","do-report","empty-env","file-and-line","function?","get-and-clear-env!","get-current-env","inc-report-counter!","is","join-fixtures","js-filename","js-line-and-column","mapped-line-and-column","ns?","report","run-all-tests","run-block","run-tests","run-tests-block","set-env!","successful?","test-all-vars","test-all-vars-block","test-ns","test-ns-block","test-var","test-var-block","test-vars","test-vars-block","testing","testing-contexts-str","testing-vars-str","try-expr","update-current-env!","use-fixtures","IAsyncTest","append!","cat","drop","filter","flatten","fold","foldcat","folder","map","mapcat","monoid","reduce","reducer","remove","take","take-while","Cat","CollFold","diff","Diff","EqualityPartition","doc","macroexpand","meta","print-doc","difference","index","intersection","join","map-invert","project","rename","rename-keys","select","subset?","superset?","union","blank?","capitalize","ends-with?","escape","includes?","index-of","join","last-index-of","lower-case","replace","replace-first","reverse","split","split-lines","starts-with?","trim","trim-newline","triml","trimr","upper-case","keywordize-keys","postwalk","postwalk-replace","prewalk","prewalk-replace","stringify-keys","walk","append-child","branch?","children","down","edit","end?","insert-child","insert-left","insert-right","left","leftmost","lefts","make-node","next","node","path","prev","remove","replace","right","rightmost","rights","root","seq-zip","up","vector-zip","xml-zip","zipper","all-ns","analyze","analyze-file","default-warning-handler","empty-env","empty-state","find-ns","forms-seq","get-js-index","get-options","in-cljs-user","no-warn","ns-interns","ns-publics","ns-resolve","parse-ns","remove-ns","resolve","warning-enabled?","with-state","add-dependencies","add-implicit-options","build","cljs-dependents-for-macro-namespaces","compile","goog-dep-string","inputs","mark-cljs-ns-for-recompile!","ns->location","ns->source","output-unoptimized","parse-js-ns","source-on-disk","src-file->goog-require","src-file->target-file","target-file-for-cljs-ns","watch","cljs-files-in","compile-file","compile-root","emit","requires-compilation?","with-core-cljs","*cljs-verbose*","*repl-opts*","analyze-source","apropos","canonicalize-specs","decorate-specs","default-special-fns","dir","doc","err-out","evaluate-form","find-doc","js-src->cljs-src","known-repl-opts","load-file","load-namespace","load-stream","mapped-stacktrace","ns-info","print-mapped-stacktrace","pst","read-source-map","repl","repl*","repl-caught","repl-prompt","repl-quit-prompt","repl-read","repl-special-doc-map","self-require?","skip-if-eol","skip-whitespace","source","source-fn","special-doc-map","IGetError","IJavaScriptEnv","IParseError","IParseStacktrace","IPrintStacktrace","IReplEnvOptions","-main","add-in-order","browser-eval","browser-state","compile-client-js","constrain-order","create-client-js-file","es","ext->mime-type","handle-post","load-javascript","mime-type->encoding","ordering","repl-client-js","repl-env","repl-env*","run-in-order","send-for-eval","send-repl-client-page","send-static","setup","-main","bootstrap-repl","create-engine","eval-resource","eval-str","init-engine","load-js-file","load-ns","repl-env","repl-env*","repl-filename","-main","close-socket","load-javascript","node-eval","platform-path","read-response","repl-env","repl-env*","seq->js-array","setup","socket","write","handle-reflect-query","macroexpand","parse-param","read-url-string","-main","bootjs","eval-result","load-file","load-javascript","repl-env","repl-env*","rhino-eval","rhino-setup","stacktrace","wrap-fn","IEval","connection","dispatch-on","handlers","parse-headers","read-get","read-headers","read-post","read-request","send-404","send-and-close","set-connection","start","state","stop",
    // Snippets which are particular only in Clojure.
    {"trigger": "require-macros", "contents": "(:require-macros [${1:namespace}${2: :as [${1/.+\\.//}]}$3${4: :reload-all}]$5)"},
    {"trigger": "use-macros",     "contents": "(:use [${1:namespace}${2: :only [${3:vars}]}]${4: :reload-all}$5)"},
 ]
}
