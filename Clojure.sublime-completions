{
  "scope": "source.clojure",
  "completions": [
    // Namaspaces
    "clojure.core","clojure.core.async","clojure.core.logic","clojure.core.logic.fd","clojure.core.logic.pldb","clojure.core.reducers","clojure.data","clojure.edn","clojure.inspector","clojure.instant","clojure.java.browse","clojure.java.io","clojure.java.javadoc","clojure.java.shell","clojure.main","clojure.pprint","clojure.reflect","clojure.repl","clojure.set","clojure.stacktrace","clojure.string","clojure.template","clojure.test","clojure.walk","clojure.xml","clojure.zip",
    // Vars
    "+'","->Eduction","*source-path*","..","*command-line-args*","-cache-protocol-fn","*read-eval*","*2","-reset-methods","*verbose-defrecords*","*print-level*","*suppress-read*","-'","*print-length*","*file*","*use-context-classloader*","->","*err*","*default-data-reader-fn*","*allow-unresolved-vars*","*1","*print-meta*","->VecSeq","*compile-files*","*math-context*","*data-readers*","*e","*clojure-version*","*'","->Vec","*unchecked-math*","*out*","*warn-on-reflection*","*compile-path*","*in*",">=","->ArrayChunk","*3","->VecNode","*ns*","*assert*","*print-readably*","*flush-on-newline*","==","*agent*","*fn-loader*","*compiler-options*","*print-dup*","->>","atom","aget","aclone","aset-long","await","alength","aset-float","alter","alter-var-root","await1","areduce","aset-double","as->","aset-boolean","associative?","aset-char","agent-errors","aset-short","amap","aset-byte","assoc!","assoc-in","alter-meta!","add-watch","agent-error","aset-int","agent","assert","add-classpath","accessor","ancestors","all-ns","array-map","alias","aset","apply","assoc","and","await-for","bit-set","butlast","bit-shift-right","bound-fn","bases","boolean","bit-shift-left","boolean-array","bit-xor","bean","booleans","biginteger","bound?","bit-and-not","bound-fn*","bigint","byte-array","bit-test","bit-and","bit-or","bit-flip","binding","bit-clear","bigdec","bit-not","byte","bytes","catch","chunk-first","contains?","cond->>","chunk","compile","char?","char","comp","cons","cat","conj!","chunk-append","conj","compare-and-set!","cycle","chunk-rest","create-ns","construct-proxy","concat","cast","counted?","char-name-string","class?","cond->","clear-agent-errors","condp","cond","chunked-seq?","char-escape-string","chars","class","case","comment","count","clojure-version","chunk-cons","comparator","char-array","compare","complement","constantly","completing","create-struct","chunk-next","chunk-buffer","commute","coll?","def","do","decimal?","dec'","doall","dedupe","dissoc","dosync","dec","delay","dorun","disj","deliver","doseq","disj!","deftype","defstruct","doto","double","definline","definterface","default-data-readers","double-array","defn","declare","dissoc!","defmethod","drop","dotimes","defonce","defn-","defprotocol","drop-last","distinct","descendants","derive","delay?","doubles","defmacro","distinct?","destructure","defmulti","deref","drop-while","defrecord","denominator","ensure","eduction","every?","enumeration-seq","ex-data","eval","error-mode","empty?","extend","even?","extends?","extend-type","EMPTY-NODE","extend-protocol","ensure-reduced","empty","error-handler","ex-info","every-pred","extenders","finally","find-ns","first","fn?","find-var","future-call","future-done?","floats","fnil","find","float?","flush","format","find-protocol-impl","future","fn","filterv","force","float","ffirst","future?","future-cancelled?","file-seq","flatten","find-protocol-method","for","find-keyword","float-array","frequencies","filter","false?","future-cancel","fnext","get-thread-bindings","gen-class","gen-interface","get","group-by","gensym","get-method","get-proxy-class","get-validator","get-in","hash-ordered-coll","hash","hash-combine","hash-set","hash-map","hash-unordered-coll","if","iterator-seq","iterate","import","isa?","if-not","int-array","inc'","if-some","interleave","identity","into","int","in-ns","instance?","identical?","integer?","intern","ifn?","inc","if-let","ints","io!","interpose","into-array","init-proxy","juxt","keep-indexed","keep","key","keyword?","keys","keyword","line-seq","last","load","lazy-seq","let","long","longs","load-reader","list*","loaded-libs","letfn","loop","long-array","load-string","load-file","locking","list","list?","lazy-cat","monitor-enter","monitor-exit","macroexpand","map","munge","make-hierarchy","mapcat","map-indexed","merge-with","min","map?","meta","method-sig","mod","macroexpand-1","memoize","memfn","mix-collection-hash","max-key","merge","mapv","min-key","methods","max","make-array","new","ns-unmap","newline","namespace","ns-publics","nthrest","neg?","num","ns-unalias","nfirst","ns-aliases","not=","ns-resolve","ns-refers","namespace-munge","ns","name","nnext","not-every?","nth","nil?","not","ns-name","ns-map","not-empty","numerator","ns-interns","ns-imports","next","nthnext","number?","not-any?","or","object-array","odd?","primitives-classnames","proxy-mappings","println-str","prefers","print-method","peek","pvalues","pr","push-thread-bindings","print-dup","pos?","pmap","pop!","prn-str","pop-thread-bindings","printf","pcalls","prn","promise","pr-str","pop","println","persistent!","prefer-method","print","print-ctor","proxy-super","partition","partition-all","partition-by","print-simple","proxy-name","partial","proxy","parents","proxy-call-with-super","print-str","quote","quot","recur","restart-agent","reduce","ref-min-history","reader-conditional","re-groups","remove-ns","rand-int","resultset-seq","rest","re-seq","reverse","range","rand-nth","refer","reduced?","repeatedly","remove","re-pattern","reversible?","ref-set","reset-meta!","read","remove-all-methods","rand","replace","re-matcher","ref","rseq","reductions","ref-history-count","reduce-kv","reset!","require","rem","random-sample","reify","re-find","run!","record?","release-pending-sends","remove-method","read-line","reader-conditional?","ratio?","remove-watch","replicate","reduced","re-matches","rationalize","read-string","rsubseq","ref-max-history","rational?","realized?","resolve","repeat","refer-clojure","set!","sort-by","seq","subs","set","satisfies?","seq?","slurp","short-array","send-via","struct","set-error-mode!","set-agent-send-executor!","some?","sort","spit","sequential?","shuffle","set?","shutdown-agents","seque","short","string?","second","set-error-handler!","some->>","set-agent-send-off-executor!","symbol","sorted-set","some","struct-map","sorted?","split-at","select-keys","set-validator!","swap!","sorted-set-by","sync","special-symbol?","subseq","some->","subvec","send-off","split-with","str","some-fn","supers","sorted-map-by","sorted-map","send","sequence","shorts","symbol?","throw","try","tree-seq","take-last","take-nth","take","thread-bound?","test","take-while","transduce","trampoline","tagged-literal?","to-array-2d","tagged-literal","time","the-ns","type","true?","Throwable->map","to-array","transient","unchecked-remainder-int","unchecked-subtract-int","unchecked-long","unchecked-negate","unchecked-inc-int","unsigned-bit-shift-right","unchecked-float","unchecked-add-int","unquote-splicing","unchecked-double","unchecked-multiply-int","unchecked-int","unchecked-multiply","unchecked-dec","use","unquote","unchecked-dec-int","update","update-in","unchecked-add","unreduced","unchecked-divide-int","unchecked-subtract","unchecked-byte","unchecked-short","underive","update-proxy","unchecked-negate-int","unchecked-inc","unchecked-char","var","vswap!","vector?","vreset!","var-set","vary-meta","volatile?","var?","vec","vector-of","val","vals","volatile!","vector","var-get","when-first","while","with-bindings*","with-loading-context","with-bindings","when-let","with-precision","when-not","when","with-open","with-meta","with-out-str","with-in-str","with-local-vars","with-redefs","with-redefs-fn","when-some","xml-seq","zipmap","zero?",">!!",">!","admix*","admix","alt!","alt!!","alts!","alts!!","buffer","close!","chan","dropping-buffer","do-alts","do-alt","filter","filter>","fn-handler","go","go-loop","into","ioc-alts!","mix","map","Mux","mapcat>","muxch*","map>","Mult","merge","map","Mix","mult","mapcat","offer!","onto-chan","Pub","pub","promise-chan","pipeline","pipe","partition","partition-by","poll!","pipeline-blocking","pipeline-async","put!","reduce","remove>","remove","solo-mode*","solo-mode","sub","sub*","sliding-buffer","split","timeout","take","tap","to-chan","toggle","tap*","thread","toggle*","thread-call","take!","unsub*","unmix*","unsub-all*","unique","untap-all","unmix","untap*","untap-all*","unsub-all","unmix-all*","unmix-all","untap","unsub","unblocking-buffer?","-conjo","!=c","-predc","-reify*","*logic-dbs*","->Substitutions","->Pair","->LCons","-reify","->ConstraintStore","*locals*","->LVar","->AnswerCache","->Choice","->PMap","-fnm","->SubstValue","-featurec","-fixc","-run","-nafc","-inc","!=","==","->SuspendedStream","appendo","addcg","assoc-dom","add-dom","assoc-meta","annotate","add-attr","answer-cache","all","add-var","bind*","bindable?","build","choice","conde","composeg*","cgoal","condu","constrain-tree","copy-term","conda","conso","conjo","composeg","dissoc-meta","defna","defnu","distincto","defnc","disunify","defne","distribute","dissoc-dom","defnm","empty-s","ext-run-csg","emptyo","enforce-constraints","ext","empty-f","enforceable-constrained","entailed?","everyg","env-locals","entangle","fnu","fk","fresh","fnc","fnm","fna","featurec","force-ans","fixc","fail","fne","firsto","fix-constraints","get-dom","get-attr","get-dom-fd","ground-term?","ientailed?","is","ifu*","ifa*","log","lcons?","lvar","llist","lcons","let-dom","lvaro","lvar?","lvars","master","matche","merge-with-root","matcha","mplus*","make-suspended-stream","member1o","map->PMap","membero","merge-doms","matchu","make-cs","map->SuspendedStream","map->SubstValue","nafc","normalize-store","nilo","nonlvaro","onceo","occurs-check","partial-map","permuteo","pred","pair","predc","project","partial-map?","run-db*","rem-attr","recover-vars-from-term","recover-vars","reifyg","run-nc*","runcg","reify-lvar-name","reify-constraints","rembero","run","run-nc","run-constraints*","run-constraint","resto","run-constraints","rem-dom","remcg","run*","run-db","sort-by-member-count","seqc","s#","solutions","stopcg","sort-by-strategy","sync-eset","subst?","suspended-stream?","subst-val?","succeed","subst-val","to-subst-val","tabled-s","treec","to-stream","trace-s","tramp","tree-term?","tabled","trace-lvar","to-s","trace-lvars","unify-with-map*","unbound-rands","updatecg","unify","unify-with-pmap*","umi","unbound-names","update-pvars!","unify-with-sequential*","update-dom","u#","update-eset","uai","var-rands","verify-all-bound","waiting-stream-check","walk-record-term","walk*","waiting-stream?","->FiniteDomain","!=c","-member?","->MultiIntervalFD","->IntervalFD","-intervals","-intersection","-drop-one","-distinct","-drop-before","-domc","-lb","==c","-disjoint?",">=","-distinctc","-difference","->fd","-ub","!=","==","*c","-keep-before","+c","bounded-listo","binops->fd","bounds","binops","domain","domc","dom","difference*","distinctc","disjoint?*","distinct","expand","ext-dom-fd","eq","eq-form","eq*","extend-to-fd","finite-domain?","get-dom","interval","interval?","in","intersection*","interval-","IInterval","ISet","interval-","interval->=","interval->","ISortedDomain","IIntervals","list-sorted?","map-sum","multi-interval","normalize-intervals","process-dom","quot","resolve-storable-dom","singleton-dom?","sorted-set->domain","to-vals","unify-with-domain*","contains-lvar?","db","db-facts","db-rel","db-retractions","db-fact","db-retraction","empty-db","facts-for","facts-using-index","ground?","index-for-query","indexed?","rel-key","rel-indexes","with-dbs","with-db","->Cat","append!","cat","CollFold","coll-fold","drop","foldcat","folder","fold","flatten","filter","fjtask","map","mapcat","monoid","pool","reduce","reducer","remove","take","take-while","diff","diff-similar","Diff","equality-partition","EqualityPartition","read","read-string","atom?","collection-tag","get-child-count","get-child","inspect-table","is-leaf","inspect","inspect-tree","list-provider","list-model","old-table-model","tree-model","table-model","parse-timestamp","read-instant-timestamp","read-instant-calendar","read-instant-date","validated","*open-url-script*","browse-url","as-relative-path","as-file","as-url","copy","Coercions","default-streams-impl","delete-file","file","input-stream","IOFactory","make-output-stream","make-parents","make-writer","make-reader","make-input-stream","output-stream","resource","reader","writer","*core-java-api*","*feeling-lucky-url*","*local-javadocs*","*remote-javadocs*","*feeling-lucky*","add-local-javadoc","add-remote-javadoc","javadoc","*sh-dir*","*sh-env*","sh","with-sh-dir","with-sh-env","demunge","load-script","main","repl-caught","repl-exception","repl-read","root-cause","repl-requires","repl","repl-prompt","stack-element-str","skip-if-eol","skip-whitespace","with-bindings","with-read-known","*print-suppress-namespaces*","*print-pretty*","*print-pprint-dispatch*","*print-radix*","*print-miser-width*","*print-right-margin*","*print-base*","code-dispatch","cl-format","fresh-line","formatter-out","formatter","get-pretty-writer","pprint","pprint-newline","print-length-loop","pprint-tab","pprint-logical-block","print-table","pp","pprint-indent","simple-dispatch","set-pprint-dispatch","write","write-out","with-pprint-dispatch","->Field","->Method","->JavaReflector","->AsmReflector","->Constructor","ClassResolver","do-reflect","flag-descriptors","map->Field","map->Method","map->Constructor","reflect","resolve-class","Reflector","TypeReference","typename","type-reflect","apropos","doc","dir","dir-fn","demunge","find-doc","pst","root-cause","source-fn","stack-element-str","source","set-break-handler!","thread-stopper","difference","intersection","index","join","map-invert","project","rename","rename-keys","select","superset?","subset?","union","print-stack-trace","print-trace-element","print-cause-trace","print-throwable","root-cause","blank?","capitalize","escape","join","lower-case","reverse","replace-first","re-quote-replacement","replace","split-lines","split","trim-newline","trimr","trim","triml","upper-case","apply-template","do-template","*stack-trace-depth*","*report-counters*","*load-tests*","*testing-contexts*","*testing-vars*","*test-out*","*initial-report-counters*","are","assert-any","assert-expr","assert-predicate","compose-fixtures","do-report","deftest","deftest-","file-position","function?","get-possibly-unbound-var","is","inc-report-counter","join-fixtures","run-all-tests","report","run-tests","set-test","successful?","test-all-vars","test-var","testing-contexts-str","testing","test-vars","try-expr","testing-vars-str","test-ns","use-fixtures","with-test","with-test-out","keywordize-keys","macroexpand-all","postwalk","prewalk-replace","prewalk","postwalk-demo","prewalk-demo","postwalk-replace","stringify-keys","walk","*sb*","*state*","*stack*","*current*","attrs","content","content-handler","element","emit","emit-element","parse","startparse-sax","tag","append-child","branch?","children","down","end?","edit","insert-child","insert-right","insert-left","left","leftmost","lefts","make-node","node","next","path","prev","rightmost","remove","replace","rights","root","right","seq-zip","up","vector-zip","xml-zip","zipper",
 ]
}